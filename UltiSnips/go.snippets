snippet minit "file init ..." !b
package main

import (
	"fmt"
)

func main(){
	$0
}
endsnippet

snippet pkg "packge ..." !b
package $0
endsnippet

snippet pkgm "package main" !b
package main
$0
endsnippet

snippet imp "import ..." !b
import "$1"
$0
endsnippet

snippet impm "import (...)" !b
import (
	$1
)
$0
endsnippet

snippet impp "import fmt" !b
import "fmt"
$0
endsnippet

snippet func "func name" !b
func $1($2) {
	$0
}
endsnippet

snippet func2 "func name" !b
func $1($2) $3{
	$0
}
endsnippet

snippet meth "func name" !b
func ($1) $2($3) {
	$0
}
endsnippet


snippet meth2 "func name" !b
func ($1) $2($3) $4{
	$0
}
endsnippet

snippet main "func main..." !b
func main() {
	$0
}
endsnippet

snippet init "func init ..." !b
func init() {
	$0
}
endsnippet

snippet derr "if err and defer" !b
$1, err := $2
if err != nil {
	$3
}
defer $1.${4:Close}()
$0
endsnippet

snippet derrf "if err panic and defer" !b
$1, err := $2
failOnError(err, "$3")
defer $1.${4:Close}()
endsnippet

snippet fmt.pf "fmt.Printf(...)" !b
fmt.Printf("$1")$0
endsnippet

snippet fmt.pfa "fmt.Printf(... ...)" !b
fmt.Printf("$1", $2)$0
endsnippet

snippet fmt.pl "fmt.Println(...)" !b
fmt.Println($1)$0
endsnippet

snippet struct "type .. struct {...}" !b
type $1 struct {
	$2
}
$0
endsnippet

snippet interface "type .. interface {...}" !b
type $1 interface {
	$2
}
$0
endsnippet

snippet httphandler "func *handler (rw http.ResponsWrite, r *http.Request){...}" !b
func $1(rw http.ResponseWriter, r *http.Request) {
	$0
}
endsnippet

snippet for "for ..." !b
for $1{
	$0
}
endsnippet

snippet if "if ... {}" !b
if $1{
$0
}
endsnippet

snippet ec.view "echo frame view" !b
func $1(c echo.Context) error{
	$0
}
endsnippet

snippet ec.init "echo frame init" !b
package main

import (
	"net/http"
	"github.com/labstack/echo"
)

func main(){
	e := echo.New()
	
	// debug mode
	e.Debug = true

	$0

	e.Logger.Fatal(e.Start(":1323"))
}
endsnippet

snippet ec.model "ec mode struct ... " !b
$1 $0 \`json:${1}`!p snip.rv = t[1].Lower()`\`
endsnippet


snippet js.tt "json test" !b
$1, _ = json.Marshal($2)
fmt.Println(string(${1}))$0
endsnippet

snippet iferr "if err {...}" !b
if err != nil {
	${1:panic(err)}
}
endsnippet

snippet http.listen "log.fatal http.listen and server" !b
log.Fatal(http.ListenAndServe("localhost:8000", nil))
endsnippet

# ginkgo test
snippet gk.bg "gk test begin" !b
var _ = Describe("$1", func(){
	$0
})
endsnippet
snippet gk.bfe "ginkgo beforeeach" !b
BeforeEach(func(){
$0
})
endsnippet
snippet gk.ds "ginkgo Describe" !b
Describe("$1", func(){
$0
})
endsnippet
snippet gk.cnt "ginkgo Context" !b
Context("$1", func(){
$0
})
endsnippet
snippet gk.it "ginkgo  It" !b
It("$1", func(){
$0
})
endsnippet
snippet gk.exp "ginkgo expect" !b
Expect($1).To(Equal($2))$0
endsnippet

# goblin unit test
snippet gb.initall "goblin init file" !b
package $1

import (
	. "github.com/franela/goblin"
	"testing"
)

func Test$2(t *testing.T){
	g := Goblin(t)
	$0
}
endsnippet
snippet gb.init "goblin init" !b
g := Goblin(t)
endsnippet
snippet gb.ds "goblin Describe" !b
g.Describe("$1", func(){
	$0
})
endsnippet
snippet gb.it "goblin it" !b
g.It("$1", func(){
	$0
})
endsnippet
snippet gb.ast "goblin assert" !b
g.Assert($1).Equal($2)$0
endsnippet
snippet gb.bf "goblin before" !b
g.Before(func(){
	$0
})
endsnippet
snippet gb.bfe "goblin beforeeach" !b
g.BeforeEach(func(){
	$0
})
endsnippet
snippet gb.af "goblin after" !b
g.After(func(){
	$0
})
endsnippet
snippet gb.afe "goblin aftereach" !b
g.AfterEach(func(){
	$0
})
endsnippet
snippet gb.imp "goblin import" !b
import (
	. "github.com/franela/goblin"
	"testing"
)
endsnippet
snippet gb.pkg "goblin pkgname" !b
. "github.com/franela/goblin"
endsnippet
